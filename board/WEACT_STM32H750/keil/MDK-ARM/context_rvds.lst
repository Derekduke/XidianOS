


ARM Macro Assembler    Page 1 


    1 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08
    2 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04
    3 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20
    4 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000
    5 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000
    6 00000000         
    7 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    8 00000000                 THUMB
    9 00000000                 REQUIRE8
   10 00000000                 PRESERVE8
   11 00000000         
   12 00000000                 IMPORT           xd_task_switch_interrupt_flag
   13 00000000                 IMPORT           xd_interrupt_from_task
   14 00000000                 IMPORT           xd_interrupt_to_task
   15 00000000         
   16 00000000         xd_interrupt_disable
                               PROC
   17 00000000                 EXPORT           xd_interrupt_disable
   18 00000000 F3EF 8010       MRS              r0, PRIMASK
   19 00000004 B672            CPSID            I
   20 00000006 4770            BX               LR
   21 00000008                 ENDP
   22 00000008         
   23 00000008         xd_interrupt_enable
                               PROC
   24 00000008                 EXPORT           xd_interrupt_enable
   25 00000008 F380 8810       MSR              PRIMASK, r0
   26 0000000C 4770            BX               LR
   27 0000000E                 ENDP
   28 0000000E         
   29 0000000E         xd_context_switch
                               PROC
   30 0000000E                 EXPORT           xd_context_switch
   31 0000000E 4A34            LDR              r2, =xd_task_switch_interrupt_f
lag
   32 00000010 6813            LDR              r3, [r2]
   33 00000012 2B01            CMP              r3, #1
   34 00000014 D004            BEQ              _reswitch
   35 00000016 F04F 0301       MOV              r3, #1
   36 0000001A 6013            STR              r3, [r2]
   37 0000001C 4A31            LDR              r2, =xd_interrupt_from_task
   38 0000001E 6010            STR              r0, [r2]
   39 00000020         
   40 00000020         _reswitch
   41 00000020 4A31            LDR              r2, =xd_interrupt_to_task
   42 00000022 6011            STR              r1, [r2]
   43 00000024         
   44 00000024 4831            LDR              r0, =NVIC_INT_CTRL



ARM Macro Assembler    Page 2 


   45 00000026 F04F 5180       LDR              r1, =NVIC_PENDSVSET
   46 0000002A 6001            STR              r1, [r0]
   47 0000002C 4770            BX               LR
   48 0000002E                 ENDP
   49 0000002E         
   50 0000002E         PendSV_Handler
                               PROC
   51 0000002E                 EXPORT           PendSV_Handler
   52 0000002E F3EF 8210       MRS              r2, PRIMASK
   53 00000032 B672            CPSID            I
   54 00000034         
   55 00000034 482A            LDR              r0, =xd_task_switch_interrupt_f
lag
   56 00000036 6801            LDR              r1, [r0]
   57 00000038 B351            CBZ              r1, pendsv_exit
   58 0000003A         
   59 0000003A F04F 0100       MOV              r1, #0x00
   60 0000003E 6001            STR              r1, [r0]
   61 00000040         
   62 00000040 4828            LDR              r0, =xd_interrupt_from_task
   63 00000042 6801            LDR              r1, [r0]
   64 00000044 B191            CBZ              r1, switch_to_task
   65 00000046         
   66 00000046 F3EF 8109       MRS              r1, psp
   67 0000004A         
   68 0000004A                 IF               {FPU} != "SoftVFP"
   69 0000004A F01E 0F10       TST              lr, #0x10   ; if(!EXC_RETURN[4]
                                                            )
   70 0000004E BF08 ED21 
              8B10             VSTMFDEQ         r1!, {d8 - d15} ; push FPU regi
                                                            ster s16~s31
   71 00000054                 ENDIF
   72 00000054         
   73 00000054 E921 0FF0       STMFD            r1!,  {r4 - r11}
   74 00000058         
   75 00000058                 IF               {FPU} != "SoftVFP"
   76 00000058 F04F 0400       MOV              r4, #0x00   ; flag = 0
   77 0000005C         
   78 0000005C F01E 0F10       TST              lr, #0x10   ; if(!EXC_RETURN[4]
                                                            )
   79 00000060 BF08 2401       MOVEQ            r4, #0x01   ; flag = 1
   80 00000064         
   81 00000064 F841 4D04       STMFD            r1!, {r4}   ; push flag
   82 00000068                 ENDIF
   83 00000068         
   84 00000068 6800            LDR              r0, [r0]
   85 0000006A 6001            STR              r1, [r0]
   86 0000006C         
   87 0000006C         switch_to_task
   88 0000006C 491E            LDR              r1, =xd_interrupt_to_task
   89 0000006E 6809            LDR              r1, [r1]
   90 00000070 6809            LDR              r1, [r1]
   91 00000072         
   92 00000072                 IF               {FPU} != "SoftVFP"
   93 00000072 C908            LDMFD            r1!, {r3}   ; pop flag
   94 00000074                 ENDIF
   95 00000074         
   96 00000074 E8B1 0FF0       LDMFD            r1!,  {r4 - r11}
   97 00000078         



ARM Macro Assembler    Page 3 


   98 00000078                 IF               {FPU} != "SoftVFP"
   99 00000078 2B00            CMP              r3,  #0     ; if(flag_r3 != 0)
  100 0000007A BF18 ECB1 
              8B10             VLDMFDNE         r1!, {d8 - d15} ; pop FPU regis
                                                            ter s16~s31
  101 00000080                 ENDIF
  102 00000080         
  103 00000080 F381 8809       MSR              psp, r1
  104 00000084         
  105 00000084                 IF               {FPU} != "SoftVFP"
  106 00000084 F04E 0E10       ORR              lr, lr, #0x10 ; lr |=  (1 << 4)
                                                            , clean FPCA.
  107 00000088 2B00            CMP              r3,  #0     ; if(flag_r3 != 0)
  108 0000008A BF18 F02E 
              0E10             BICNE            lr, lr, #0x10 ; lr &= ~(1 << 4)
                                                            , set FPCA.
  109 00000090                 ENDIF
  110 00000090         
  111 00000090         pendsv_exit
  112 00000090 F382 8810       MSR              PRIMASK, r2
  113 00000094 F04E 0E04       ORR              lr, lr, #0x04
  114 00000098 4770            BX               lr
  115 0000009A                 ENDP
  116 0000009A         
  117 0000009A         xd_context_switch_to
                               PROC
  118 0000009A                 EXPORT           xd_context_switch_to
  119 0000009A 4913            LDR              r1, =xd_interrupt_to_task
  120 0000009C 6008            STR              r0, [r1]
  121 0000009E         
  122 0000009E                 IF               {FPU} != "SoftVFP"
  123 0000009E         ; CLEAR CONTROL.FPCA
  124 0000009E F3EF 8214       MRS              r2, CONTROL ; read
  125 000000A2 F022 0204       BIC              r2, #0x04   ; modify
  126 000000A6 F382 8814       MSR              CONTROL, r2 ; write-back
  127 000000AA                 ENDIF
  128 000000AA         
  129 000000AA 490E            LDR              r1, =xd_interrupt_from_task
  130 000000AC F04F 0000       MOV              r0, #0x0
  131 000000B0 6008            STR              r0, [r1]
  132 000000B2         
  133 000000B2 490B            LDR              r1, =xd_task_switch_interrupt_f
lag
  134 000000B4 F04F 0001       MOV              r0, #1
  135 000000B8 6008            STR              r0, [r1]
  136 000000BA         
  137 000000BA 480D            LDR              r0, =NVIC_SYSPRI2
  138 000000BC 490D            LDR              r1, =NVIC_PENDSV_PRI
  139 000000BE F8D0 2000       LDR.W            r2, [r0, #0x00]
  140 000000C2 EA41 0102       ORR              r1,r1,r2
  141 000000C6 6001            STR              r1, [r0]
  142 000000C8         
  143 000000C8 4808            LDR              r0, =NVIC_INT_CTRL
  144 000000CA F04F 5180       LDR              r1, =NVIC_PENDSVSET
  145 000000CE 6001            STR              r1, [r0]
  146 000000D0         
  147 000000D0 4809            LDR              r0, =SCB_VTOR
  148 000000D2 6800            LDR              r0, [r0]
  149 000000D4 6800            LDR              r0, [r0]



ARM Macro Assembler    Page 4 


  150 000000D6 F380 8808       MSR              msp, r0
  151 000000DA         
  152 000000DA B661            CPSIE            F
  153 000000DC B662            CPSIE            I
  154 000000DE         
  155 000000DE                 ENDP
  156 000000DE         
  157 000000DE         xd_interrupt_task_switch
                               PROC
  158 000000DE                 EXPORT           xd_interrupt_task_switch
  159 000000DE 4770            BX               lr
  160 000000E0                 ENDP
  161 000000E0         
  162 000000E0         
  163 000000E0                 ALIGN            4
  164 000000E0         
  165 000000E0                 END
              00000000 
              00000000 
              00000000 
              E000ED04 
              E000ED20 
              FFFF0000 
              E000ED08 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7.fp.dp --apcs=
interwork --depend=weact_stm32h750\context_rvds.d -oweact_stm32h750\context_rvd
s.o -I.\RTE\_WEACT_STM32H750 -ID:\Keil\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Inc
lude -ID:\Keil\Arm\Packs\Keil\STM32H7xx_DFP\2.7.0\Drivers\CMSIS\Device\ST\STM32
H7xx\Include --predefine="__UVISION_VERSION SETA 531" --predefine="_RTE_ SETA 1
" --predefine="STM32H750xx SETA 1" --predefine="_RTE_ SETA 1" --list=context_rv
ds.lst ..\..\..\..\arch\cortex-m7\context_rvds.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      None
Comment: .text unused
PendSV_Handler 0000002E

Symbol: PendSV_Handler
   Definitions
      At line 50 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 51 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: PendSV_Handler used once
_reswitch 00000020

Symbol: _reswitch
   Definitions
      At line 40 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 34 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: _reswitch used once
pendsv_exit 00000090

Symbol: pendsv_exit
   Definitions
      At line 111 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 57 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: pendsv_exit used once
switch_to_task 0000006C

Symbol: switch_to_task
   Definitions
      At line 87 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 64 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: switch_to_task used once
xd_context_switch 0000000E

Symbol: xd_context_switch
   Definitions
      At line 29 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 30 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: xd_context_switch used once
xd_context_switch_to 0000009A

Symbol: xd_context_switch_to
   Definitions
      At line 117 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 118 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: xd_context_switch_to used once
xd_interrupt_disable 00000000

Symbol: xd_interrupt_disable



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 16 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 17 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: xd_interrupt_disable used once
xd_interrupt_enable 00000008

Symbol: xd_interrupt_enable
   Definitions
      At line 23 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 24 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: xd_interrupt_enable used once
xd_interrupt_task_switch 000000DE

Symbol: xd_interrupt_task_switch
   Definitions
      At line 157 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 158 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: xd_interrupt_task_switch used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 2 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 44 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 143 in file ..\..\..\..\arch\cortex-m7\context_rvds.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 5 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 45 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 144 in file ..\..\..\..\arch\cortex-m7\context_rvds.s

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 4 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 138 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 3 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 137 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: NVIC_SYSPRI2 used once
SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 1 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 147 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
Comment: SCB_VTOR used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

xd_interrupt_from_task 00000000

Symbol: xd_interrupt_from_task
   Definitions
      At line 13 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 37 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 62 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 129 in file ..\..\..\..\arch\cortex-m7\context_rvds.s

xd_interrupt_to_task 00000000

Symbol: xd_interrupt_to_task
   Definitions
      At line 14 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 41 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 88 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 119 in file ..\..\..\..\arch\cortex-m7\context_rvds.s

xd_task_switch_interrupt_flag 00000000

Symbol: xd_task_switch_interrupt_flag
   Definitions
      At line 12 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
   Uses
      At line 31 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 55 in file ..\..\..\..\arch\cortex-m7\context_rvds.s
      At line 133 in file ..\..\..\..\arch\cortex-m7\context_rvds.s

3 symbols
354 symbols in table
